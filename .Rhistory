qplot(votes, rating, data = movies)
?geom_smooth
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point(method = "lm") + geom_smooth() # with linear smoother
g + geom_point() + geom_smooth(method = "lm") # with linear smoother
g + geom_point() + facet_grid(. ~ drv) + geom_smooth(method = "lm") # with linear
g + geom_point() + facet_grid(. ~ drv) + geom_smooth(method = "lm") + ggtitle("sdf")
g + geom_point() + facet_grid(. ~ drv) + geom_smooth(method = "lm") + ggtitle("sdf") + theme_bw()
g + geom_point() + ggtitle("sdf") + theme_bw()
g + geom_point(color="red") + ggtitle("sdf") + theme_bw()
g + geom_point(color="red", size=4) + ggtitle("sdf") + theme_bw()
g + geom_point(color="red", size=4, alpha=1/2) + ggtitle("sdf") + theme_bw()
g + geom_point(color="red", size=4, alpha=1/22) + ggtitle("sdf") + theme_bw()
g + geom_point(color="red", size=4, alpha=1/4) + ggtitle("sdf") + theme_bw()
g + geom_point(aes(color=drv), size=4, alpha=1/4) + ggtitle("sdf") + theme_bw()
g + geom_point(aes(color=drv), size=4) + ggtitle("sdf") + theme_bw()
60/1.2
36/8
set.seed(1234)
par(mar(c(0,0,0,0)))
x <- rnorm(12, mean = repl(1:3, each=4), sd = 0.2)
y <- rnorm(12, mean = repl(c(1,2,1), each=4), sd = 0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
set.seed(1234)
par(mar = (c(0,0,0,0)))
x <- rnorm(12, mean = repl(1:3, each=4), sd = 0.2)
y <- rnorm(12, mean = repl(c(1,2,1), each=4), sd = 0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
set.seed(1234)
par(mar = (c(0,0,0,0)))
x <- rnorm(12, mean = rep(1:3, each=4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each=4), sd = 0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
set.seed(1234)
par(mar = (c(2,2,2,2)))
x <- rnorm(12, mean = rep(1:3, each=4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each=4), sd = 0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
df <- data.frame(x = x, y = y)
dist(df)
distxy <- dist(df)  # lower triangle matrix
hClust <- hclust(distxy)
plot(hClust)
set.seed(1234)
par(mar = (c(2,2,2,2)))
x <- rnorm(12, mean = rep(1:3, each=4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each=4), sd = 0.2)
plot(x,y,col="blue",pch=19,cex=2)
text(x+0.05, y+0.05, labels=as.character(1:12))
df <- data.frame(x,y)
kmeansObj <- kmeans(df, centers=3)
kmeansObj
par(mar = rep(0.2,4))
plot(x,y, col = kmeansObj$cluster, pch=19, cex=2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd=3)
set.seed(1234)
x <- rnorm(12, mean = rep(1:3, each=4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each=4), sd = 0.2)
df <- data.frame(x,y)
kmeansObj <- kmeans(df, centers=5)
par(mar = rep(0.2,4))
plot(x,y, col = kmeansObj$cluster, pch=19, cex=2)
points(kmeansObj$centers, col = 1:5, pch = 3, cex = 3, lwd=3)
sample(1:12)
dm <- as.matrix(dataframe)[sample)1:12, ]
dm <- as.matrix(dataFrame)[sample)1:12, ]
set.seed(1234)
par(mfrow = c(1,2), mar = c(2,4,0.1,0.1))
x <- rnorm(12, mean = rep(1:3, each=4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each=4), sd = 0.2)
df <- data.frame(x,y)
dm <- as.matrix(df)[sample)1:12, ]
dm <- as.matrix(df)[sample(1:12), ]
t(dm)[,nrow(dm):1)]
t(dm)[,nrow(dm):1]
image(t(dm)[,nrow(dm):1], yaxt = 'n')
set.seed(1234)
par(mfrow = c(1,2), mar = c(2,4,0.1,0.1))
x <- rnorm(12, mean = rep(1:3, each=4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1,2,1), each=4), sd = 0.2)
df <- data.frame(x,y)
kmeansObj <- kmeans(df, centers=3)
dm <- as.matrix(df)[sample(1:12), ]
image(t(dm)[,nrow(dm):1], yaxt = 'n')
image(t(dm)[,order(kmeansObj$cluster)], yaxt = 'n')
40/241
241/40
heat.colors()
topo.colors()
?heat.colors
topo.colors(9)
topo.colors(1)
topo.colors(2)
topo.colors(3)
rainbow(4)
?mean
?rainbow
colors()
x <- rnorm(10000)
y <- rnorm(10000)
smoothScatter(x,y)
?rgb
plot(x,y)
plot(x,y, pch = 19)
plot(x,y, pch = 19, col = rgb(0,0,0,0.2))
plot(x,y, pch = 19, col = rgb(0,0,0,0))
plot(x,y, pch = 19, col = rgb(0,0,0,0, 1))
plot(x,y, pch = 19, col = rgb(0,0,0,0, 0.5))
plot(x,y, pch = 19, col = rgb(0,0,0,0, 0.2))
plot(x,y, pch = 19, col = rgb(0,0,0,0.2))
plot(x,y, pch = 19, col = rgb(0,0,0,0.9))
plot(x,y, pch = 19, col = rgb(0,0,0,0.1))
plot(x,y, pch = 19, col = rgb(255,0,0,0.1))
plot(x,y, pch = 19, col = rgb(1,0,0,0.1))
heat.colors()
heat.colors(2)
rgb(1,0,0,0.1))
rgb(1,0,0,0.1)
plot(x,y, pch = 19, col = heat.colors(1)
)
plot(x,y, pch = 19, col = heat.colors(3))
plot(x,y, pch = 19, col = heat.colors(20))
plot(x,y, pch = 19, col = heat.colors(99))
colorRamp(c(red, blue))
colorRamp(c("red", "blue"))
p <- colorRamp(c("red", "blue"))
plot(x,y, pch = 19, col = p)
plot(x,y, pch = 19, col = p())
p(1)
p(0)
p <- colorRampPalette(c("red", "blue"))
plot(x,y, pch = 19, col = p
)
plot(x,y, pch = 19, col = p())
p
p(0)
p(1)
p(2)
plot(x,y, pch = 19, col = p(10))
a <- 2500000 ^ 2
b <- a ^ 2
d <- b ^ 2
e <- b * 2
e <- b ^ 2
e <- d ^ 2
4*4
16*4
64*4
install.packages('knitr', dependencies = TRUE)
.5 * .9
.5 * .1
45/46
.1 * .9
5^3
3^5
setwd("/common/coursera/reproduce")
install.packages('ProjectTemplate')
dir()
library('ProjectTemplate')
create.project('ReproduceProj1')
x <- rnorm(100)
y <- rnorm(100)
plot(x,y)
y <- rnorm(1000)
x <- rnorm(1000)
plot(x,y)
x <- rnorm(500)
y <- rnorm(500)
plot(x,y)
setwd("/common/coursera/reproduce/proj2")
source("proj2.R")
damage$PROPDMGEXP
unique(damage$PROPDMGEXP)
unique(damage$CROPDMGEXP)
View(damage)
names(damage)
names(damage)[6]
names(damage)[7]
names(damage)[9]
names(damage)[8]
names(damage)[10]
names(damage)[11]
names(damage)[12]
source("proj2.R")
names(damage)
damage$PROPDMGEXP
unique(damage$PROPDMGEXP)
unique(damage$CROPDMGEXP)
source("proj2.R")
unique(cleanData$eventType)
unique(cleanData$eventType[grepl("WIND", cleanData$eventType)])
unique(cleanData$eventType[grepl("HAIL", cleanData$eventType)])
source("proj2.R")
unique(rawData$eventType[grepl("HAIL", rawData$eventType)])
unique(cleanData$eventType[grepl("WIND", cleanData$eventType)])
unique(cleanData$eventType[grepl("COLD", cleanData$eventType)])
unique(cleanData$eventType[grepl("WET", cleanData$eventType)])
source("proj2.R")
unique(cleanData$eventType)
source("proj2.R")
unique(cleanData$eventType)
unique(cleanData$eventType[grepl("WET", cleanData$eventType)])
unique(cleanData$eventType[grepl("COLD", cleanData$eventType)])
unique(cleanData$eventType[grepl("WIND", cleanData$eventType)])
unique(cleanData$eventType[grepl("COLD", cleanData$eventType)])
unique(cleanData$eventType[grepl("WET", cleanData$eventType)])
unique(cleanData$eventType[grepl("SNOW", cleanData$eventType)])
unique(cleanData$eventType[grepl("ICE", cleanData$eventType)])
source("proj2.R")
unique(cleanData$eventType[grepl("ICE", cleanData$eventType)])
unique(cleanData$eventType)
unique(cleanData$eventType[grepl("RAIN", cleanData$eventType)])
unique(cleanData$eventType[grepl("LIGHTNING", cleanData$eventType)])
unique(cleanData$eventType[grepl("THUNDERSTORM", cleanData$eventType)])
unique(cleanData$eventType[grepl("WIND", cleanData$eventType)])
unique(cleanData$eventType[grepl("COLD", cleanData$eventType)])
source("proj2.R")
unique(cleanData$eventType)
unique(cleanData$eventType[grepl("WIND", cleanData$eventType)])
source("proj2.R")
unique(cleanData$eventType)
unique(cleanData$eventType[grepl("RAIN", cleanData$eventType)])
unique(cleanData$eventType[grepl("FREEZ", cleanData$eventType)])
unique(cleanData$eventType[grepl("RAIN", cleanData$eventType)])
source("proj2.R")
unique(cleanData$eventType)
unique(cleanData$eventType[grepl("THUNDERSTORM", cleanData$eventType)])
cleanData[cleanData$eventType="?",]
cleanData[cleanData$eventType=="?",]
unique(cleanData$eventType)
unique(cleanData$eventType[grepl("WINTER", cleanData$eventType)])
unique(cleanData$eventType)
unique(cleanData$eventType[grepl("SPOUT", cleanData$eventType)])
unique(cleanData$eventType[grepl("FIRE", cleanData$eventType)])
unique(cleanData$eventType[grepl("SMOKE", cleanData$eventType)])
unique(cleanData$eventType[grepl("DUST", cleanData$eventType)])
source("proj2.R")
unique(cleanData$eventType)
source("proj2.R")
grep("^/?$", "?")
grep("^/?$", "x")
grep("^/?$", "?")
grep("^x$", "x")
grep("^?$", "?")
grep("^\\?$", "?")
grep("^\\?$", "x")
source("proj2.R")
unique(cleanData$eventType)
unique(cleanData$eventType[grepl("PRECIPITATION", cleanData$eventType)])
unique(cleanData$eventType[grepl("FROST", cleanData$eventType)])
unique(cleanData$eventType[grepl("FREEZ", cleanData$eventType)])
unique(cleanData$eventType)
unique(cleanData$eventType[grepl("LAND", cleanData$eventType)])
source("proj2.R")
unique(cleanData$eventType)
unique(cleanData$eventType[grepl("MIX", cleanData$eventType)])
unique(cleanData$eventType[grepl("STORM", cleanData$eventType)])
unique(cleanData$eventType[grepl("WATER", cleanData$eventType)])
unique(cleanData$eventType[grepl("SHOWER", cleanData$eventType)])
unique(cleanData$eventType[grepl("LOW", cleanData$eventType)])
unique(cleanData$eventType[grepl("TEMP", cleanData$eventType)])
unique(cleanData$eventType[grepl("HEAT", cleanData$eventType)])
source("proj2.R")
View(damageByEventType)
View(damage)
damageByEventType <- ddply(damage, .(eventType), numcolwise(sum))
View(damageByEventType)
unique(cleanData$eventType[grepl("WIND", cleanData$eventType)])
unique(cleanData$eventType[grepl("BLIZZARD", cleanData$eventType)])
unique(cleanData$eventType[grepl("^LI", cleanData$eventType)])
unique(cleanData$eventType[grepl("^LIG", cleanData$eventType)])
unique(cleanData$eventType[grepl("^MUD", cleanData$eventType)])
source("proj2.R")
View(damageByEventType)
plot(eventType, propDmgThousands)
hist(propDmgThousands)
hist(damage$propDmgThousands)
pie(damage$propDmgThousands)
barplot(damage$propDmgThousands)
summary(damage$propDmgThousands)
mean(damage$propDmgThousands)
meanProperyDamage <- mean(damage$propDmgThousands)
a <- damageByEventType[damageByEventType$propDmgThousands > meanPropertyDamage]
meanProperyDamage <- mean(damage$propDmgThousands)
meanPropertyDamage <- mean(damage$propDmgThousands)
a <- damageByEventType[damageByEventType$propDmgThousands > meanPropertyDamage]
a <- damageByEventType[damageByEventType$propDmgThousands > meanPropertyDamage,]
View(a)
barplot(a$propDmgThousands)
barplot(a$propDmgThousands, xlab=a$eventType)
barplot(a$propDmgThousands, names.arg=a$eventType)
quantile(damageByEventType$propDmgThousands)
q <- quantile(damageByEventType$propDmgThousands)
q
class(q)
q
q.1
?quantile
q[1]
q[2]
q[3]
q[4]
q[5]
q[6]
q <- quantile(damageByEventType$propDmgThousands)[4]
q
q4PropDamage <- quantile(damageByEventType$propDmgThousands)[4]
a <- damageByEventType[damageByEventType$propDmgThousands > meanPropertyDamage,]
a <- damageByEventType[damageByEventType$propDmgThousands > q4PropDamage,]
View(a)
pie(a)
pie(a$propDmgThousands)
barplot(a$propDmgThousands)
barplot(a$propDmgThousands, names.arg=a$eventType)
b <- damageByEventType[damageByEventType$propDmgThousands <= q4PropDamage,]
sum(b$propDmgThousands)
min(a$propDmgThousands)
max(a$propDmgThousands)
cleanData <- generalizeEvent("^MUD", "MUDSLIDE")
?kable
library(knitr)
?kable
names(damageByEventType)
x <- damageByEventType[,c(1,6)]
x
kable(x)
x <- damageByEventType[order(propDmgThousands),c(1,6)]
x <- damageByEventType[order(damageByEventType$propDmgThousands),c(1,6)]
View(x)
x <- damageByEventType[order(-damageByEventType$propDmgThousands),c(1,6)]
View(x)
?xtable
library(xtable)
install.package(xtable)
package.install(xtable)
install.packages(xtable)
install.packages("xtable")
?xtable
library(xtable)
?xtable
q4PropDamage <- quantile(damageByEventType$propDmgThousands)[5]
a <- damageByEventType[damageByEventType$propDmgThousands > q4PropDamage,]
View(a)
x <- damageByEventType[order(-damageByEventType$propDmgThousands),c(1,6)]
kable(x)
x <- damageByEventType[order(-damageByEventType$propDmgThousands),c(1,6)]
kable(x)
printCurrency <- function(value, currency.sym="$", digits=2, sep=",", decimal=".") {
paste(
currency.sym,
formatC(value, format = "f", big.mark = sep, digits=digits, decimal.mark=decimal),
sep=""
)
}
printCurrency(123123.334)
printCurrency(123123.336)
printCurrency(123123.335)
printCurrency(123123)
printCurrency(123123, digits=0)
printCurrency(123123.335, digits=0)
printCurrency(123123.335)
printCurrency(c(1:4))
View(damageByEventType)
damageByEventType$propCostInThousands <- printCurrency(damageByEventType$propDmgThousands)
View(damageByEventType)
source("proj2.R")
View(damageByEventType)
View(a)
unique(damage$eventType)
unique(cleanData$eventType[grepl("WIND", cleanData$eventType)])
unique(cleanData$eventType[grepl("FLD", cleanData$eventType)])
unique(cleanData$eventType[grepl("URB", cleanData$eventType)])
a <- cleanData[grepl("URB", cleanData$eventType),]
View(a)
unique(cleanData$eventType[grepl("STRE", cleanData$eventType)])
x <- damageByEventType[order(-damageByEventType$propDmgThousands),c(1,6)]
kable(x)
View(damageByEventType)
x <- damageByEventType[order(-damageByEventType$propDmgThousands),c(1,8)]
kable(x)
a <- cleanData[grepl("URBAN SMALL", cleanData$eventType),]
a <- damageByEventType[damageByEventType$propDmgThousands > q4PropDamage,]
x <- a[order(-a$propDmgThousands),c(1,8)]
kable(x)
a <- cleanData[grepl("SURF", cleanData$eventType),]
View(a)
unique(cleanData$eventType[grepl("SURF", cleanData$eventType)])
x <- damageByEventType[order(-damageByEventType$propDmgThousands),c(1,6)]
kable(x)
source("proj2.R")
x <- damageByEventType[order(-damageByEventType$propDmgThousands),c(1,8)]
kable(x)
q4CropDamage <- quantile(damageByEventType$cropDmgThousands)[4]
a <- damageByEventType[damageByEventType$cropDmgThousands > q4CropDamage,]
x <- a[order(-a$cropDmgThousands),c(1,8)]
kable(x)
View(a)
x <- a[order(-a$cropDmgThousands),c(1,7)]
kable(x)
damageByEventType$cropCostInThousands <- printCurrency(damageByEventType$cropDmgThousands)
x <- a[order(-a$cropDmgThousands),c(1,9)]
kable(x)
View(a)
damageByEventType <- ddply(damage, .(eventType), numcolwise(sum))
damageByEventType$propCostInThousands <- printCurrency(damageByEventType$propDmgThousands)
damageByEventType$cropCostInThousands <- printCurrency(damageByEventType$cropDmgThousands)
q4PropDamage <- quantile(damageByEventType$propDmgThousands)[4]
q4CropDamage <- quantile(damageByEventType$cropDmgThousands)[4]
a <- damageByEventType[damageByEventType$cropDmgThousands > q4CropDamage,]
x <- a[order(-a$cropDmgThousands),c(1,8)]
kable(x)
a <- damageByEventType[damageByEventType$cropDmgThousands > q4CropDamage,]
x <- a[order(-a$cropDmgThousands),c(1,9)]
kable(x)
names(a)
names(a)[6]
names(a)[7]
names(a)[8]
names(a)[9]
showDamageTable <- function(dmgCol, formattedDmgCol) {
a <- damageByEventType[damageByEventType$cropDmgThousands > q4CropDamage,]
x <- a[order(-a$cropDmgThousands),c(1,8)]
kable(x)
}
propDmgCol <- 6
cropDmgCol <- 7
propCostCol <- 8
cropCostCol <- 9
showDamageTable(propDmgCol, propCostCol)
damageByEventType$cropDmgThousands
damageByEventType[[7]]
showDamageTable <- function(dmgCol, formattedDmgCol, minDamage) {
a <- damageByEventType[damageByEventType[[dmgCol]] > minDamage,]
x <- a[order(-a[[dmgCol]]),c(1,formattedDmgCol)]
kable(x)
}
showDamageTable(propDmgCol, propCostCol, q4PropDamage)
showDamageTable(cropDmgCol, cropCostCol, q4CropDamage)
healthByEventType <- ddply(deathsAndInjuries, .(eventType), numcolwise(sum))
View(healthByEventType)
fatalities <- healthByEventType[healthByEventType$FATALITIES < 0, (c(1,2))]
names(healthByEventType)
fatalities <- healthByEventType[healthByEventType$FATALITIES > 0, (c(1,2))]
View(fatalities)
injuries <- healthByEventType[healthByEventType$INJURIES > 0, (c(1,3))]
View(injuries)
meanFatalities <- mean(fatalities$FATALITIES)
meanInjuries <- mean(fatalities$INJURIES)
meanInjuries <- mean(injuries$INJURIES)
meanInjuries <- mean(injuries[[2]])
mean(injuries[[2]])
showTopInTable <- function(tb) {
meanVal <- mean(tb[[2]])
a <- tb[tb[[2]] > meanVal] # only show the top values
x <- a[order(-a[[2]]),] # sort descending by the 2nd column
kable(x)
}
showTopInTable(fatalities)
showTopInTable <- function(tb) {
meanVal <- mean(tb[[2]])
a <- tb[tb[[2]] > meanVal] # only show the top values
x <- a[order(-a[[2]],] # sort descending by the 2nd column
kable(x)
}
showTopInTable <- function(tb) {
meanVal <- mean(tb[[2]])
a <- tb[tb[[2]] > meanVal] # only show the top values
x <- a[order(-a[[2]]),] # sort descending by the 2nd column
kable(x)
}
showTopInTable(fatalities)
showTopInTable <- function(tb) {
meanVal <- mean(tb[[2]])
a <- tb[tb[[2]] > meanVal,] # only show the top values
x <- a[order(-a[[2]]),] # sort descending by the 2nd column
kable(x)
}
showTopInTable(fatalities)
showTopInTable(injuries)
?formatC
showTopInTable <- function(tb) {
meanVal <- mean(tb[[2]])
a <- tb[tb[[2]] > meanVal,] # only show the top values
a$pretty <- formatC(a[[2]], format="d", sep=",")
x <- a[order(-a[[2]]), c(1,3)] # sort descending by the 2nd column
kable(x)
}
showTopInTable(injuries)
showTopInTable <- function(tb) {
meanVal <- mean(tb[[2]])
a <- tb[tb[[2]] > meanVal,] # only show the top values
a$pretty <- formatC(a[[2]], format="d", big.mark=",")
x <- a[order(-a[[2]]), c(1,3)] # sort descending by the 2nd column
kable(x)
}
showTopInTable(injuries)
showTopInTable <- function(tb, colName) {
meanVal <- mean(tb[[2]])
a <- tb[tb[[2]] > meanVal,] # only show the top values
a$pretty <- formatC(a[[2]], format="d", big.mark=",")
names(a)[3] <- colName
x <- a[order(-a[[2]]), c(1,3)] # sort descending by the 2nd column
kable(x)
}
showTopInTable(fatalities, "fatalities")
showTopInTable(injuries, "injuries")
source("proj2.R")
